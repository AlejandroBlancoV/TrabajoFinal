// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prueba1.Backend.BBDD;

#nullable disable

namespace Prueba1.Migrations
{
    [DbContext(typeof(MiContexto))]
    [Migration("20240603075531_Dos")]
    partial class Dos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Calendarios");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Jornada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalendarioId");

                    b.ToTable("Jornadas");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Liga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalendarioId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarioId");

                    b.ToTable("Ligas");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Partido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("JornadaId")
                        .HasColumnType("int");

                    b.Property<bool>("Jugado")
                        .HasColumnType("bit");

                    b.Property<int>("LocalId")
                        .HasColumnType("int");

                    b.Property<int>("ResultadoId")
                        .HasColumnType("int");

                    b.Property<int>("VisitanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JornadaId");

                    b.HasIndex("LocalId");

                    b.HasIndex("ResultadoId");

                    b.HasIndex("VisitanteId");

                    b.ToTable("Partidos");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Resultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GolesLocal")
                        .HasColumnType("int");

                    b.Property<int>("GolesVisitante")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resultados");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Alineacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId")
                        .IsUnique();

                    b.ToTable("Alineaciones");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ControladoPorUsuario")
                        .HasColumnType("bit");

                    b.Property<int>("DiferenciaGoles")
                        .HasColumnType("int");

                    b.Property<byte[]>("Escudo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("GolesAFavor")
                        .HasColumnType("int");

                    b.Property<int>("GolesEnContra")
                        .HasColumnType("int");

                    b.Property<int?>("LigaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartidosEmpatados")
                        .HasColumnType("int");

                    b.Property<int>("PartidosGanados")
                        .HasColumnType("int");

                    b.Property<int>("PartidosJugados")
                        .HasColumnType("int");

                    b.Property<int>("PartidosPerdidos")
                        .HasColumnType("int");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<int>("Presupuesto")
                        .HasColumnType("int");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LigaId");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Plantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId")
                        .IsUnique();

                    b.ToTable("Plantillas");
                });

            modelBuilder.Entity("Prueba1.Backend.Jugadores.Jugador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlineacionId")
                        .HasColumnType("int");

                    b.Property<int>("Defensa")
                        .HasColumnType("int");

                    b.Property<int>("Disparo")
                        .HasColumnType("int");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("Fisico")
                        .HasColumnType("int");

                    b.Property<int>("Media")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Paradas")
                        .HasColumnType("int");

                    b.Property<int>("Pase")
                        .HasColumnType("int");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<int>("Regate")
                        .HasColumnType("int");

                    b.Property<int>("Salario")
                        .HasColumnType("int");

                    b.Property<string>("TipoJugador")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlineacionId");

                    b.HasIndex("EquipoId");

                    b.ToTable("Jugadores");

                    b.HasDiscriminator<string>("TipoJugador").HasValue("Jugador");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Prueba1.Backend.Jugadores.Defensor", b =>
                {
                    b.HasBaseType("Prueba1.Backend.Jugadores.Jugador");

                    b.HasDiscriminator().HasValue("Defensor");
                });

            modelBuilder.Entity("Prueba1.Backend.Jugadores.Delantero", b =>
                {
                    b.HasBaseType("Prueba1.Backend.Jugadores.Jugador");

                    b.HasDiscriminator().HasValue("Delantero");
                });

            modelBuilder.Entity("Prueba1.Backend.Jugadores.Medio", b =>
                {
                    b.HasBaseType("Prueba1.Backend.Jugadores.Jugador");

                    b.HasDiscriminator().HasValue("Medio");
                });

            modelBuilder.Entity("Prueba1.Backend.Jugadores.Portero", b =>
                {
                    b.HasBaseType("Prueba1.Backend.Jugadores.Jugador");

                    b.HasDiscriminator().HasValue("Portero");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Jornada", b =>
                {
                    b.HasOne("Prueba1.Backend.Competiciones.Calendario", null)
                        .WithMany("Jornadas")
                        .HasForeignKey("CalendarioId");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Liga", b =>
                {
                    b.HasOne("Prueba1.Backend.Competiciones.Calendario", "Calendario")
                        .WithMany()
                        .HasForeignKey("CalendarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendario");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Partido", b =>
                {
                    b.HasOne("Prueba1.Backend.Competiciones.Jornada", null)
                        .WithMany("Partidos")
                        .HasForeignKey("JornadaId");

                    b.HasOne("Prueba1.Backend.Equipos.Equipo", "Local")
                        .WithMany()
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prueba1.Backend.Competiciones.Resultado", "Resultado")
                        .WithMany()
                        .HasForeignKey("ResultadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prueba1.Backend.Equipos.Equipo", "Visitante")
                        .WithMany()
                        .HasForeignKey("VisitanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Local");

                    b.Navigation("Resultado");

                    b.Navigation("Visitante");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Alineacion", b =>
                {
                    b.HasOne("Prueba1.Backend.Equipos.Equipo", null)
                        .WithOne("Alineacion")
                        .HasForeignKey("Prueba1.Backend.Equipos.Alineacion", "EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Equipo", b =>
                {
                    b.HasOne("Prueba1.Backend.Competiciones.Liga", null)
                        .WithMany("Equipos")
                        .HasForeignKey("LigaId");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Plantilla", b =>
                {
                    b.HasOne("Prueba1.Backend.Equipos.Equipo", null)
                        .WithOne("Plantilla")
                        .HasForeignKey("Prueba1.Backend.Equipos.Plantilla", "EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba1.Backend.Jugadores.Jugador", b =>
                {
                    b.HasOne("Prueba1.Backend.Equipos.Alineacion", null)
                        .WithMany("Jugadores")
                        .HasForeignKey("AlineacionId");

                    b.HasOne("Prueba1.Backend.Equipos.Equipo", "Equipo")
                        .WithMany("Jugadores")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Calendario", b =>
                {
                    b.Navigation("Jornadas");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Jornada", b =>
                {
                    b.Navigation("Partidos");
                });

            modelBuilder.Entity("Prueba1.Backend.Competiciones.Liga", b =>
                {
                    b.Navigation("Equipos");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Alineacion", b =>
                {
                    b.Navigation("Jugadores");
                });

            modelBuilder.Entity("Prueba1.Backend.Equipos.Equipo", b =>
                {
                    b.Navigation("Alineacion")
                        .IsRequired();

                    b.Navigation("Jugadores");

                    b.Navigation("Plantilla")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
